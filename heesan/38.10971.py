# CS 분야 가장 중요하게 취급되는 문제이다.
# 1번부터 N번까지 번호가 매겨져있는 도시들이 있다
# 도시들 사이에 길있음(길이 없을 수도 있다)
# 어느 한 도시에서 출발해 N개의 도시를 모두 거쳐 다시 돌아오는 여행
# 한번 갔던 곳으로는 다시 갈 수 없다.
# 맨 마지막으로 돌아오는 것은 예외이다.
# 이런 경로는 여러가지가 있는데 , 가장 적은 비용을 들이는 계획은?
# 여행비용은 행렬 W[i][j] 형태  (도시 i에서 도시 j로 가기 위한 비용)
# 비용은 대칭적이지 않다 ...?즉, W[i][j] 는 W[j][i]와 다를 수 있다.
# W[i][i]는 항상 0이다.
# 경우에 따라서 도시 i에서 도시 j로 갈 수 없는 경우도 있으며 이럴 경우 W[i][j]=0이라고 하자.
# N과 비용 행렬이 주어졌을 때, 가장 적은 비용을 들이는 외판원의 순회 여행 경로를 구하는 프로그램을 작성하시오.

# 단, 한 번 갔던 도시로는 다시 갈 수 없다.

# N과 비용 행렬이 주어졌을 때,
N = int(input())  # 첫째 줄에 도시의 수 N이 주어진다.
# 다음 N개의 줄에는 비용 행렬이 주어진다.
# 갈 수 없는 경우는 0이 주어진다. W[i][j]는 도시 i에서 j로 가기 위한 비용을 나타낸다.

pay_list = []
for _ in range(N):
    cost = list(map(int, input().split()))
    pay_list.append(cost)

print(pay_list)

print(pay_list[0][0])

# 출력 : 첫째 줄에 외판원의 순회에 필요한 최소 비용을 출력





## 다시 고민해보자